$(document).ready(() => { let e = $("#modalMain"); e.on("show.bs.modal", function (e) { let t = $(this), a = $(e.relatedTarget), o = a.data("mode"); t.find(".modal-dialog"); let n = t.find(".modal-dialog").attr("class", "modal-dialog"), l = n.find(".modal-content"), i = l.find("#modalMainContent").html('<div class="modal-body"></div>'), r = l.find(".modal-header"); l.find(".modal-body"), l.find(".modal-footer"); let s = r.find(".modal-title").text(`\xaf_(ãƒ„)_/\xaf`); switch (o) { case "reportHE": case "reportSP": let d = a.data("id"); $.ajax(`${GETCONFIG("SERVER_SIDE")}/View/page/onSession/backend.php?action=${o}`, { type: "POST", dataType: "HTML", data: { id: d }, success(e) { n.addClass("modal-xl"), s.text(`${{ reportHE: "Reporte #", reportSP: "N\xb0 Requisici\xf3n: " }[o] + window.atob(d)}`), i.html(e) } }); break; case "commentHE": break; default: console.log(`Failed modalMain: ${o}`) } }) }), $(window).on("focus", function () { sessionStorage.setItem("windowIsFocus", !0) }).on("blur", function () { sessionStorage.setItem("windowIsFocus", !1) }); const lastDay = (e = new Date().toLocaleString(GETCONFIG("LOCALE"), $.extend(GETCONFIG("TIMEZONE"), { year: "numeric" })), t = new Date().toLocaleString(GETCONFIG("LOCALE"), $.extend(GETCONFIG("TIMEZONE"), { month: "2-digit" }))) => new Date(e, t, 0).getDate(), isHTML = e => e instanceof Element || e instanceof Document, elementCreator = (e, t = null) => { let a = isHTML(e) ? e : document.createElement(e); if (null !== t) for (data in t) if (["text"].includes(data)) a.innerHTML = a.innerHTML + t[data]; else if (["html"].includes(data)) { if ("object" == typeof t.html) for (newCE in t.html) a.append(elementCreator(Object.keys(t.html[newCE])[0], Object.values(t.html[newCE])[0])) } else a.setAttribute(data, t[data]); return a }, updateDatatable = () => { $("table.dataTable").DataTable().ajax.reload(null, !1) }, ldapAutoComplete = (e, t = {}) => { let a = $.extend({ limit: 1, url: `${GETCONFIG("SERVER_SIDE")}/View/page/onSession/backend.php?action=ldapFind`, dataForLDAP: !0 }, "object" == typeof t ? t : {}); "object" == typeof e && e.forEach(e => { let t = $(e.element ?? !1); if (t.length && !t.data("ldapautocomplete")) { t.attr("data-ldapautocomplete", !0); let o = t.prop("tagName"); if ("INPUT" === o) { let n = $(elementCreator("div", { class: "position-relative" })), l = t.clone().appendTo(n), i = t.clone().appendTo(n); i.css({ "background-color": "transparent", position: "absolute", top: 0, left: 0, "z-index": 1, "pointer-events": "none" }).removeAttr("name").removeAttr("required"), t.replaceWith(n), l.on(`${e.event ?? "input"}`, function () { let t = $(this), o = t.data("ldapautocomplete"); if (!0 === o) { let n = l.val(), r = i.val(); r.toUpperCase().startsWith(n.toUpperCase()) ? i.val(r ? n + r.substr(n.length) : "") : $.ajax(a.url, { type: "POST", dataType: "JSON", data: { limit: 1, filter: [e.search ?? !1], search: `${n}*` }, success(t) { if (t.length && !t.error && e.search && n != r) { if (t[0][e.search]) { let o = !0 == a.dataForLDAP ? t[0][e.search][0] ?? !1 : t[0][e.search]; i.val(o ? n + o.substr(n.length) : "") } else i.val("") } else i.val("") } }) } }).on("keypress keydown", e => { let t = l.val(), a = i.val(); 9 === e.which && "" != a && t != a && (e.preventDefault(), l.val(a)) }).on("blur", () => { i.val("") }) } else console.log(`dio mio, pero eto que eh: ${o}`) } }) }, alerts = (e, t = "Sweetalert2") => {
    let a = sessionStorage.getItem("windowIsFocus"), o = $.extend({ title: "", text: "", html: "", icon: "", duration: 3e3, position: "top-end" }, e), n = t.toLocaleLowerCase(); switch (a || "sweetalert2" === n || alerts(o, "window"), n) {
        case "sweetalert2": Swal.mixin({ toast: !0, position: o.position, showConfirmButton: !1, timer: o.duration, timerProgressBar: !0, didOpen(e) { e.addEventListener("mouseenter", Swal.stopTimer), e.addEventListener("mouseleave", Swal.resumeTimer) } }).fire({ title: o.title, text: o.text, icon: o.icon.toLocaleLowerCase(), html: o.html }); break; case "window": !a && "Notification" in window && (notification = !1, "granted" === Notification.permission ? notification = new Notification(o.title, { body: o.text, icon: $('link[rel="icon"]').attr("href"), dir: "ltr" }) : "denied" !== Notification.permission && Notification.requestPermission().then(e => { "granted" === e && (notification = new Notification(o.title, { body: o.text, icon: $('link[rel="icon"]').attr("href"), dir: "ltr" })) }), !1 !== notification && $(notification).on("click", function (e) { e.preventDefault(), window.open(location.href, "_blank") })); break; default: window.alert(`
                ${o.status}
                ${o.title}
                ${o.text}
                ${o.html}
            `)
    }
}, swalFire = async (e = {}, t = []) => { e = $.extend({ title: "Cuerpo", input: "textarea", showCancelButton: !0, confirmButtonText: "Confirmar", cancelButtonText: "Cancelar", focusConfirm: !1 }, e), t.length && t.forEach(t => { e[t] && delete e[t] }); let { value: a } = await Swal.fire(e); return a }, xls = (e, t = {}) => { let a, o; a = (a = new Date().toLocaleDateString(locale, { weekday: "long", year: "numeric", day: "numeric", month: "2-digit" })).replace(",", ""); let n, l, i; if ((n = $($(e).get(0))) && 0 != n.length) { for (data in l = n.html(), i = n.prop("tagName"), Object.keys(o = $.extend({ title: "@now", filename: "@now" }, t)).forEach(e => { "string" == typeof o[e] && (o[e] = o[e].replace("@now", a)) }), noValidFn = { " ": "_", ",": "_" }) search = data, replace = noValidFn[data], o.filename = o.filename.replaceAll(search, replace); for (data in noValidCo = [/<input(.*?)>/g]) l = l.replace(noValidCo[data], ""); if (o.filename.includes(".xls") || (o.filename = `${o.filename}.xls`), !0 !== o.checkTable || "TABLE" == i) { let r, s; r = JSON.stringify({ param: o, content: l }), (s = new XMLHttpRequest).open("POST", `${GETCONFIG("SERVER_SIDE")}/View/page/onSession/backend.php?action=xls`), s.onload = () => { if (200 === s.status) { let e, t, a; e = new Blob([s.response], { type: "application/vnd.ms-excel" }), a = createElem("a", { href: t = URL.createObjectURL(e), download: o.filename }), document.body.appendChild(a), a.click(), document.body.removeChild(a), URL.revokeObjectURL(t), alerts({ title: `Se descarg\xf3 un archivo XLS`, icon: "success" }) } else alerts({ title: "Error al descargar el archivo XLS", icon: "error" }) }, s.responseType = "arraybuffer", s.send(r) } else alerts({ title: "Etiqueta no valida para excel", icon: "info" }) } else alerts({ title: `Error al descargar el archivo XLS. Indicador no encontrado -> ${e}`, icon: "error" }) };